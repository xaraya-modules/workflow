<?xml version="1.0"?><process>
  <name>Review Articles</name>
  <isValid>y</isValid>
  <version>1.0</version>
  <isActive>n</isActive>
   <description>If you enable the workflow hooks for articles and configure the workflow module to use this process for articles, it will be automatically started when an article is created</description>
  <lastModif>18/10/2003 [03:55:14]</lastModif>
  <sharedCode><![CDATA[<?php
?>  ]]></sharedCode>
  <activities>
    <activity>
      <name>start</name>
      <type>start</type>
      <description>default start activity</description>
      <lastModif>18/10/2003 [03:55:14]</lastModif>
      <isInteractive>n</isInteractive>
      <isAutoRouted>y</isAutoRouted>
      <roles>
      </roles>
      <code><![CDATA[<?php
// save the module, itemtype and itemid for which the hook was called
    if (empty($args['module'])) $args['module'] = xarMod::getName();
    $instance->set('module',$args['module']);
    if (empty($args['itemtype'])) $args['itemtype'] = 0;
    $instance->set('itemtype',$args['itemtype']);
    if (empty($args['itemid'])) $args['itemid'] = 0;
    $instance->set('itemid',$args['itemid']);
// save the current user
    $instance->set('user',xarUser::getVar('id'));
?>      ]]></code>    </activity>
    <activity>
      <name>Review Article</name>
      <type>activity</type>
      <description>Review an article before approving or rejecting it</description>
      <lastModif>18/10/2003 [03:55:14]</lastModif>
      <isInteractive>y</isInteractive>
      <isAutoRouted>y</isAutoRouted>
      <roles>
        <role>editors</role>
      </roles>
      <code><![CDATA[<?php
// Get the module, itemtype and itemid from the workflow instance
$module = $instance->get('module');
$itemtype = $instance->get('itemtype');
$itemid = $instance->get('itemid');
if (empty($itemid) || !is_numeric($itemid)) {
    $msg = xarML('Invalid article #(1)', xarVar::prepForDisplay($itemid));
    throw new BadParameterException(null, $msg);
}

// Retrieve the item
$article = xarMod::apiFunc('articles','user','get', array('aid' => $itemid));
if (empty($article)) {
    $msg = xarML('Unable to find article #(1)', xarVar::prepForDisplay($itemid));
    throw new BadParameterException(null, $msg);
}

// Security check
$input = array();
$input['article'] = $article;
$input['mask'] = 'EditArticles';
if (!xarMod::apiFunc('articles','user','checksecurity',$input)) {
    $msg = xarML('You have no permission to modify article #(1)',
                 xarVar::prepForDisplay($itemid));
    throw new BadParameterException(null, $msg);
}
unset($input);

// Get parameters
xarVar::fetch('edit','isset', $edit, NULL, xarVar::DONT_SET);
xarVar::fetch('approve','isset', $approve, NULL, xarVar::DONT_SET);
xarVar::fetch('reject','isset', $reject, NULL, xarVar::DONT_SET);
xarVar::fetch('frontpage','isset', $frontpage, NULL, xarVar::DONT_SET);
xarVar::fetch('reason','isset', $reason, NULL, xarVar::DONT_SET);
if (empty($reason)) $reason = '';

if (!empty($edit)) {
    // Go to the articles modify page
    xarController::redirect(xarController::URL('articles', 'admin', 'modify',
                                  array('aid' => $itemid)));
    return true;
} elseif (!empty($approve)) {
    // Save the reviewer information
    $instance->set('reviewer', xarUser::getVar('id'));
    $instance->set('reviewed', time());
    // Save the new status
    $instance->set('status', 'approved');
    $instance->set('reason', $reason);
    $instance->set('title', $article['title']);
    $instance->complete();
} elseif (!empty($reject)) {
    // Save the reviewer information
    $instance->set('reviewer', xarUser::getVar('id'));
    $instance->set('reviewed', time());
    // Save the new status
    $instance->set('status', 'rejected');
    $instance->set('reason', $reason);
    $instance->set('title', $article['title']);
    $instance->complete();
} elseif (!empty($frontpage)) {
    // Save the reviewer information
    $instance->set('reviewer', xarUser::getVar('id'));
    $instance->set('reviewed', time());
    // Save the new status
    $instance->set('status', 'frontpage');
    $instance->set('reason', $reason);
    $instance->set('title', $article['title']);
    $instance->complete();
} else {
    // Get the name of the user who initiated the process
    $user = $instance->get('user');
    $tplData['user'] = xarUser::getVar('name', $user);

    // Get the time when the process was started
    $started = $instance->started;
    $tplData['date'] = xarLocale::getFormattedDate('long', $started);

    // Get a preview of the item
    $tplData['preview'] = xarMod::guiFunc('articles', 'user', 'display',
                                  array('preview' => true, 'article' => $article));
}
?>      ]]></code>      <template><![CDATA[
<xar:template xmlns:xar="http://xaraya.com/2004/blocklayout">
  <div class="xar-mod-body"><h2>Review Article</h2>
<div style="margin: auto;">
<xar:ml>Article submitted by #(1) on #(2)<xar:mlvar>#$user#</xar:mlvar><xar:mlvar>#$date#</xar:mlvar></xar:ml>

<form method="post" action="&xar-modurl-workflow-user-run_activity;">
<div>
<input type="hidden" name="activityId" value="#$activityId#"/>
<input type="hidden" name="iid" value="#$iid#"/>
<input type="hidden" name="return_url" value="#$return_url#"/>
<br/><br/><textarea name="reason" rows="4" cols="40"></textarea><br/><br/>
<input type="submit" name="approve" value="#xarML('Approve')#"/>
<input type="submit" name="frontpage" value="#xarML('Frontpage')#"/>
<input type="submit" name="edit" value="#xarML('Edit')#"/>
<input type="submit" name="reject" value="#xarML('Reject')#"/>
</div>
</form>

<xar:if condition="!empty($preview)">
<div style="width: 100%;padding: 3px;">
<h2>Preview</h2>
    #$preview#
</div>
<xar:else/>
    No preview available...
</xar:if>
</div>
</div>
</xar:template>      ]]></template>    </activity>
    <activity>
      <name>end</name>
      <type>end</type>
      <description>default end activity</description>
      <lastModif>18/10/2003 [03:55:14]</lastModif>
      <isInteractive>n</isInteractive>
      <isAutoRouted>y</isAutoRouted>
      <roles>
      </roles>
      <code><![CDATA[<?php
?>      ]]></code>    </activity>
    <activity>
      <name>Change Status</name>
      <type>activity</type>
      <description>Change the status of the article</description>
      <lastModif>18/10/2003 [03:55:14]</lastModif>
      <isInteractive>n</isInteractive>
      <isAutoRouted>y</isAutoRouted>
      <roles>
      </roles>
      <code><![CDATA[<?php
// Get the module, itemtype and itemid from the workflow instance
$module = $instance->get('module');
$itemtype = $instance->get('itemtype');
$itemid = $instance->get('itemid');
if (empty($itemid) || !is_numeric($itemid)) {
    $msg = xarML('Invalid article #(1)', xarVar::prepForDisplay($itemid));
    throw new BadParameterException(null, $msg);
}

// Retrieve the module item
$article = xarMod::apiFunc('articles','user','get', array('aid' => $itemid));
if (empty($article)) {
    $msg = xarML('Unable to find article #(1)', xarVar::prepForDisplay($itemid));
    throw new BadParameterException(null, $msg);
}
$article['ptid'] = $article['pubtypeid'];

// Get the new status for this item
$status = $instance->get('status');

// Set the item status
switch ($status) {
    case 'approved':
        $article['status'] = 2;
         break;
    case 'rejected':
        $article['status'] = 1;
         break;
    case 'frontpage':
        $article['status'] = 3;
         break;
    default:
        $article['status'] = 0;
         break;
}

// Pass to API - watch out, this will call update hooks again :-)
if (!xarMod::apiFunc('articles', 'admin', 'update', $article)) {
    return; // throw back
}

// Send mail to the user or whatever...
$user = $instance->get('user');
// ...
// Your article $instance->get('title') was reviewed by $instance->get('reviewer') on
// $instance->get('reviewed') and assigned the status $instance->get('status').
// No reason was supplied / The reason was $instance->get('reason')
// ...
?>      ]]></code>    </activity>
    <activity>
      <name>Check Status</name>
      <type>standalone</type>
      <description>Automatically approve an article (or whatever) when a certain time has elapsed after the article was submitted.

This activity must be scheduled, and it will be called by the scheduler module so we associate a specific scheduler role to it - you can e.g. map the anonymous user to that role.

If you want to test this activity manually -without the scheduler- you can make it interactive and then run it like other stand-alone activities.
</description>
      <lastModif>27/10/2003 [04:14:39]</lastModif>
      <isInteractive>n</isInteractive>
      <isAutoRouted>n</isAutoRouted>
      <roles>
        <role>scheduler</role>
      </roles>
      <code><![CDATA[<?php

// We cannot use the $ instance object here, because this is a stand-alone activity

// Specify the deadline for automatic approval - adapt as you want
$now = time();
$deadline = 48*60*60; // 2 days here

// Find the activity id for reviewing articles in this process
$actinfo = $process->getActivityByName('Review Article');
if (empty($actinfo) || empty($actinfo['activityId'])) {
    return;
}
$checkId = $actinfo['activityId'];

// Find all instances that have been waiting for a review for a certain time
$findinstances = xarMod::apiFunc('workflow','user','findinstances',
                                    array('activityId' => $checkId,
                                             'max_started' => $now - $deadline));
if (empty($findinstances) || count($findinstances) < 1) {
    return;
}

$curinstance = new Instance($activity->db);
foreach ($findinstances as $info) {
    // get this particular instance
    $curinstance->getInstance($info['instanceId']);

/* we're not doing any escalation here - cfr. Music CD Loan for an example
    // see when we last escalated this instance
    $lastescalated = $curinstance->get('escalated');
    // if we stay in this activity to e.g. send a mail at escalation, skip any
    // second escalation unless we hit the deadline again - adapt as needed
    if (!empty($lastescalated) && $lastescalated > $now - $deadline) {
        continue;
    }
     $curinstance->set('escalated',$now);
*/

    // Get the article id that we're currently checking
    $itemid = $curinstance->get('itemid');
    if (empty($itemid) || !is_numeric($itemid)) {
        // something went wrong here - we're missing a valid itemid
        $reason = xarML('Invalid item id');
        $curinstance->set('reason',$reason);
        // set the status of this instance to "exception"
        $curinstance->setStatus('exception');
        continue;
    }

    // Retrieve the article
    $article = xarMod::apiFunc('articles','user','get', array('aid' => $itemid));
    if (empty($article)) {
        // the article is already gone
        $reason = xarML('Article cannot be found');
        $curinstance->set('reason',$reason);
        // abort this instance - we don't need it anymore
        $curinstance->abort($checkId);
        continue;
    }

    // Save the article title in the instance for later
    $curinstance->set('title', $article['title']);

    // See if this article has already been given some status other than 'submitted',
    // e.g. via the admin interface of articles
    if (!empty($article['status'])) {
        $reason = xarML('Article already has status #(1)', $article['status']);
        $curinstance->set('reason',$reason);
        // abort this instance - we don't need it anymore
        $curinstance->abort($checkId);
        continue;
    }

    // Automatically approve the article with the reason "Out of Office" :-)
    $reason = xarML('Out of Office');

    // Save the reviewer information (= the scheduler here)
    $curinstance->set('reviewer', xarSession::getAnonId());
    $curinstance->set('reviewed', time());
    // Save the new status
    $curinstance->set('status', 'approved');
    $curinstance->set('reason', $reason);
    $curinstance->complete($checkId);

    // or set the status of this instance to "exception"
    // $curinstance->setStatus('exception');

    // or abort the instance altogether
    // $curinstance->abort($checkId);

    // or send a mail to $article['authorid'] if there is one

    // or send a mail to all users assigned to the role(s) for this activity
    // $roles = $activity->getRoles();

    // or ...
}

?>      ]]></code>    </activity>
  </activities>
  <transitions>
     <transition>
       <from>start</from>
       <to>Review Article</to>
     </transition>
     <transition>
       <from>Review Article</from>
       <to>Change Status</to>
     </transition>
     <transition>
       <from>Change Status</from>
       <to>end</to>
     </transition>
  </transitions>
</process>